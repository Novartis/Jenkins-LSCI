<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>A Jenkins project for creating CellProfiler compatible image lists and adapting image paths between platforms.&#xd;
&lt;p&gt;Supports creation of image lists from InCell and Yokagawa acquired images.&#xd;
&lt;p&gt;Supports adaptation of Jenkins generated image lists as well as image lists exported from CellProfiler.&#xd;
      </description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>WHAT_IS_THIS</name>
          <description>&lt;h1 style=&quot;color:blue&quot;&gt;Image List Source&lt;/h1&gt;
&lt;h3 style=&quot;color:red&quot;&gt;[Required]&lt;/h3&gt;</description>
          <defaultValue>A utility job for creating CellProfiler compatible image lists and adapting image paths between platforms</defaultValue>
        </hudson.model.StringParameterDefinition>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@1.4">
          <name>SELECT</name>
          <description>&lt;p&gt;Select image list source. You may upload a CellProfiler exported list or create new one from acquired images on the Network</description>
          <randomName>choice-parameter-529391686944002</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>siteConfigPath=&quot;${System.getenv(&apos;JENKINS_HOME&apos;)}/userContent/properties/jobSite.properties&quot;
siteConfig=new File(siteConfigPath)
siteProperties=new Properties()
siteProperties.load(siteConfig.newDataInputStream())
extraShares=siteProperties.getProperty(&apos;select.ac.choices&apos;).split(&apos;,&apos;)
UNC_YOKOGAWA_SHARE=siteProperties.getProperty(&apos;unc.yokogawa.share&apos;)
def choices=[&apos;Upload:selected&apos;]
extraShares.each{
choices.add(it)
}
return choices
//&apos;From_InCell_Network&apos;,&apos;From_Yokogawa_Network&apos;]</script>
            <fallbackScript>return [&apos;Error in SELECT script&apos;]</fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <choiceType>PT_RADIO</choiceType>
          <filterable>false</filterable>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.4">
          <name>LIST_FROM</name>
          <description>&lt;p&gt;Select an image list exported from the CellProfiler desktop client or a choose a network folder for new list generation</description>
          <randomName>choice-parameter-529391691480716</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>/*Load default site shares */
siteConfigPath=&quot;${System.getenv(&apos;JENKINS_HOME&apos;)}/userContent/properties/jobSite.properties&quot;
siteConfig=new File(siteConfigPath)
siteProperties=new Properties()
siteProperties.load(siteConfig.newDataInputStream())
/* expand tokens in properties */
siteProperties.each{
propEval=(it.value.startsWith(&apos;!!&apos;))?evaluate(it.value.replace(&apos;!!&apos;,&apos;&quot;&apos;)):it.value
it.value=propEval as String
}

UNC_INCELL_SHARE=siteProperties.getProperty(&apos;unc.incell.share&apos;)
UNC_YOKOGAWA_SHARE=siteProperties.getProperty(&apos;unc.yokogawa.share&apos;)

html=&apos;&apos;
switch(SELECT){
 case&quot;Upload&quot;:
html=&apos;&apos;&apos;
&lt;input name=&quot;file&quot; type=&quot;file&quot; jsonaware=&quot;true&quot;&gt;
&apos;&apos;&apos;
 break

case&quot;From_InCell_Network&quot;:
	html=&quot;&quot;&quot;
&lt;input name=&quot;value&quot; value=&quot;$UNC_INCELL_SHARE&quot; class=&quot;setting-input&quot; type=&quot;text&quot;&gt;
&quot;&quot;&quot;	
break

case&quot;From_Yokogawa_Network&quot;:
	html=&quot;&quot;&quot;
&lt;input name=&quot;value&quot; value=&quot;$UNC_YOKOGAWA_SHARE&quot; class=&quot;setting-input&quot; type=&quot;text&quot;&gt;
&quot;&quot;&quot;	
break

default:
html=&apos;&apos;&apos;

&apos;&apos;&apos;
}
return html</script>
            <fallbackScript>return &apos;Error in ImageList&apos;</fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>SELECT</referencedParameters>
          <choiceType>ET_FORMATTED_HTML</choiceType>
          <omitValueField>true</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@1.4">
          <name>IMAGE_SOURCE</name>
          <description>&lt;p&gt;Select&lt;b&gt; InCell or Yokogawa image source folder&lt;/b&gt; 
&lt;p&gt;
&lt;li&gt;Only folders that include acquisition metadata are parsed&lt;/li&gt;&lt;p&gt;
&lt;li&gt;Image sets from &lt;b&gt;multiple plates&lt;/b&gt; may be combined by selecting their parent folder&lt;/li&gt;</description>
          <randomName>choice-parameter-529391695824182</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>def netShare=&apos;&apos;

if (IMAGE_SOURCE.startsWith(LIST_FROM)){
netShare=IMAGE_SOURCE
}else{
netShare=LIST_FROM
}
def defaultNetPath=LIST_FROM
def folder=&apos;&apos;
def fileChoiceList=[:]
def label=&apos;&apos;

switch(SELECT){
 case&quot;Upload&quot;:
fileChoiceList.put(&apos;Select&apos;, &apos;SELECT \&apos;From_Network\&apos; to browse remote shares&apos;)
 break
case { it.contains(&apos;Network&apos;)}:

if (netShare==&apos;&apos;){
folder=defaultNetPath
label=&apos;Initial&apos;
}else if(netShare.contains(&apos;,&apos;)){
multiSelect=netShare.split(&apos;,&apos;)
first=new File(multiSelect.first())
folder=first.parent
label=&apos;MultipleSelections&apos;
fileChoiceList.put(&apos;multi_select&apos;,&quot;---$label:selected&quot; as String)
multiSelect.each{
folderName=it.split(&apos;\\\\&apos;).last()
fileChoiceList.put(it,&quot;---$folderName:selected&quot; as String)
}
}
else{
folder=netShare
label=&apos;Current&apos;
}

myDir=new File(folder)
myParent=myDir.parent
fileChoiceList.put(folder,&quot;---$label:$folder:selected&quot; as String)
fileChoiceList.put(myParent, &quot;---Parent:$myParent&quot; as String)

subdirList=[:]
myDir.eachDir{
if (it.isDirectory()&amp;&amp;label!=&apos;MultipleSelections&apos;){
fileChoiceList.put(it.path,it.name)
//subdirList.put(it.path,it.name)
}
}

break

default:
fileChoiceList.put(&apos;Default&apos;, &apos;Default:Enter a Network path to browse&apos;)
}

return fileChoiceList.sort()</script>
            <fallbackScript>return [&apos;Error in IMAGE_SOURCE&apos;]</fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>SELECT,LIST_FROM,IMAGE_SOURCE</referencedParameters>
          <choiceType>PT_MULTI_SELECT</choiceType>
          <filterable>false</filterable>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <hudson.model.ChoiceParameterDefinition>
          <name>ADAPT_FOR</name>
          <description>&lt;p&gt;If needed, select additional formats to adapt your image list
&lt;p&gt;Provide the appropriate FROM_PATH and TO_PATH parameters below</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>LINUX</string>
              <string>HTTP-SERVER</string>
              <string>WINDOWS-UNC</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.4">
          <name>PATH_MAPPING</name>
          <description></description>
          <randomName>choice-parameter-529391705698706</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>import groovy.io.FileType

html=&quot;&quot;&quot;
FROM_PATH:&lt;input id=&quot;mPathKey&quot; type=&quot;text&quot; name=&quot;value&quot; class=&quot;setting-input&quot; value=\&quot;$IMAGE_SOURCE\&quot;&gt; &lt;p&gt;
TO_PATH:&lt;input id=&quot;mPathValue&quot; type=&quot;text&quot; name=&quot;value&quot; class=&quot;setting-input&quot; value=\&quot;${(ADAPT_FOR==&apos;HTTP-SERVER&apos;)?&apos;http://&apos;:&apos;&apos;}\&quot;&gt;
&lt;p&gt;Create your own FROM-TO-PATH mapping by providing a FROM_PATH and its replacement TO_PATH
&lt;p&gt;
&lt;!--input name=&quot;subject&quot; type=&quot;button&quot; value=&quot;ADD&quot; onclick=&quot;copyExternalKeyValue()&quot;/--&gt;
&quot;&quot;&quot;

/* hidden_html is for carrying into HTML the value from Active Choice Parameters */

hidden_html=&quot;&lt;input id=\&quot;mNode\&quot; value=\&quot;$ADAPT_FOR\&quot; type=\&quot;hidden\&quot;&gt;&quot;

return html+hidden_html</script>
            <fallbackScript>return[&apos;Error in PATH_MAPPING&apos;]</fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>ADAPT_FOR,IMAGE_SOURCE</referencedParameters>
          <choiceType>ET_FORMATTED_HTML</choiceType>
          <omitValueField>true</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.4">
          <name></name>
          <description>&lt;h1 style=&quot;color:blue&quot;&gt;Channel-To-Concept Configuration&lt;/h1&gt;
&lt;h3 style=&quot;color:red&quot;&gt;[Required]&lt;/h3&gt;</description>
          <randomName>choice-parameter-529391709937078</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>/*Java Script UI controls for managing PATH_MAPPING entries
element id: jsPathPlan
*/
html=&apos;&apos;&apos;
&lt;p&gt; Click the &lt;b&gt;ADD&lt;/b&gt; button to add map entries. &lt;b&gt;Repeat as necessary&lt;/b&gt; to add more selection clauses
&lt;p&gt;To delete map entries check them and click DELETE. To clear all, click RESET
&lt;div id=&quot;jsPathPlan&quot;&gt;
&lt;input id=&quot;addJsPathEntry&quot; type=&quot;button&quot; value=&quot;ADD&quot; onclick=&quot;addPlannedPathAction(&apos;jsPathPlan&apos;)&quot;/&gt;
&lt;input id=&quot;delJsPathEntry&quot; name=&quot;subject&quot; type=&quot;button&quot; value=&quot;DELETE&quot; onclick=&quot;deletePlannedActionv(&apos;xtPathPlan&apos;,&apos;jsPathPlanAction&apos;)&quot;/&gt;
&lt;input id=&quot;resetAllPathEntries&quot; name=&quot;subject&quot; type=&quot;button&quot; value=&quot;RESET&quot;onclick=&quot;resetPlannedAction(&apos;xtPathPlan&apos;,&apos;jsPathPlanAction&apos;)&quot;/&gt;
&lt;p&gt;
&lt;/div&gt;&apos;&apos;&apos;
return html</script>
            <fallbackScript></fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters></referencedParameters>
          <choiceType>ET_FORMATTED_HTML</choiceType>
          <omitValueField>true</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.4">
          <name>PATH_MAP</name>
          <description>(Hidden) PATH FROM-TO MAP entries</description>
          <randomName>choice-parameter-624486160352158</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>html=&apos;&apos;&apos;&lt;input id=&quot;xtPathPlan&quot; name=&quot;value&quot; class=&quot;setting-input&quot; type=&quot;text&quot; /&gt;&apos;&apos;&apos;

helperJavaScript=&quot;&quot;&quot;
&lt;script type=&quot;text/javascript&quot;&gt;
/* Function creates map when both key and value are provided from  CV selection */
function addPlannedPathAction(plan) {
var planAction= &apos;map&apos;;
var mNode= document.getElementById(&quot;mNode&quot;).value; 
var mKey= document.getElementById(&quot;mPathKey&quot;);
var mValue = document.getElementById(&quot;mPathValue&quot;).value;
var dsOper=&apos;=&apos;
var planVal=&apos;&apos;;
//planVal=planVal.concat(&quot;[&quot;,&quot;action:\\&quot;&quot;,planAction,&quot;\\&quot;,operator:\\&quot;&quot;,dsOper,&quot;\\&quot;,property:\\&quot;&quot;,mKey.value,&quot;\\&quot;,value:\\&quot;&quot;,mValue,&quot;\\&quot;&quot;,&quot;]&quot;);
planVal=planVal.concat(&quot;[&quot;,&quot;type:\\&quot;&quot;,mNode,&quot;\\&quot;,source:\\&quot;&quot;,mKey.value,&quot;\\&quot;,destination:\\&quot;&quot;,mValue,&quot;\\&quot;&quot;,&quot;]&quot;);
//planVal=planVal.concat(mKey.value,&quot;:&quot;,mValue,&quot;,&quot;);
document.getElementById(&quot;xtPathPlan&quot;).value = document.getElementById(&quot;xtPathPlan&quot;).value.concat(planVal);
/* add checkbox option */
addAnnotationCheckBox(plan, mNode.concat(&apos;.&apos;,&apos;FROM&apos;),&quot;mPathKey&quot;, dsOper, mValue, planVal)
}
&lt;/script&gt;

&quot;&quot;&quot; //triple doubles

return html+helperJavaScript</script>
            <fallbackScript></fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters></referencedParameters>
          <choiceType>ET_FORMATTED_HIDDEN_HTML</choiceType>
          <omitValueField>true</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@1.4">
          <name>MAPPING</name>
          <description>&lt;p&gt;Select an option for mapping acqusition channels to biological concepts in the pipeline
&lt;li&gt;&lt;b&gt;Assisted option is SLOW! &lt;/b&gt;Will parse an xdce file in IMAGE_SOURCE folder to determine channels 
&lt;p&gt;</description>
          <randomName>choice-parameter-529391701463027</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>return [&apos;typical&apos;,&apos;manual&apos;,&apos;assisted&apos;]</script>
            <fallbackScript>return[&apos;Error in MAPPING&apos;]</fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.4">
          <name>CHANNEL_TO_CONCEPT</name>
          <description></description>
          <randomName>choice-parameter-529391705698706</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>import groovy.io.FileType

html=&apos;&apos;

switch(MAPPING){
case&quot;typical&quot;:
html=&apos;&apos;&apos;
&lt;input type=&quot;hidden&quot;&gt;
&lt;select id=&quot;mKey&quot;  name=&quot;value&quot; &gt;
&lt;option value=&quot;DAPI&quot;&gt;DAPI&lt;/option&gt;
&lt;option value=&quot;FITC&quot;&gt;FITC&lt;/option&gt;
&lt;option value=&quot;Cy5&quot;&gt;Cy5&lt;/option&gt;
&lt;option value=&quot;Cy3&quot;&gt;Cy3&lt;/option&gt;
&lt;option value=&quot;TexasRed&quot;&gt;TexasRed&lt;/option&gt;
&lt;option value=&quot;dsRed&quot;&gt;dsRed&lt;/option&gt;
&lt;option value=&quot;mCherry&quot;&gt;mCherry&lt;/option&gt;
&lt;option value=&quot;TRITC&quot;&gt;TRITC-INCELL6000&lt;/option&gt;
&lt;option value=&quot;1&quot;&gt;1-Yokogawa&lt;/option&gt;
&lt;option value=&quot;2&quot;&gt;2-Yokogawa&lt;/option&gt;
&lt;option value=&quot;3&quot;&gt;3-Yokogawa&lt;/option&gt;
&lt;option value=&quot;4&quot;&gt;4-Yokogawa&lt;/option&gt;
&lt;/select&gt;-CHANNEL
&lt;input id=&quot;mValue&quot; type=&quot;text&quot; name=&quot;value&quot;&gt;-CONCEPT
&lt;p&gt;Select one of the typical CHANNEL  VALUES and enter a corresponding CP pipeline CONCEPT
&lt;p&gt;

&apos;&apos;&apos;
break

case&quot;manual&quot;:
html=&apos;&apos;&apos;
&lt;input id=&quot;mKey&quot; type=&quot;text&quot; name=&quot;value&quot;&gt;-CHANNEL
&lt;input id=&quot;mValue&quot; type=&quot;text&quot; name=&quot;value&quot;&gt;-CONCEPT
&lt;p&gt;Create your own CHANNEL-TO-CONCEPT mapping by providing a CHANNEL and its corresponding CP pipeline CONCEPT
&lt;p&gt;
&lt;!--input name=&quot;subject&quot; type=&quot;button&quot; value=&quot;ADD&quot; onclick=&quot;copyExternalKeyValue()&quot;/--&gt;
&apos;&apos;&apos;
 break

 case&quot;assisted&quot;:
html=&quot;&quot;&quot;
&lt;input type=&quot;hidden&quot;&gt;
&lt;select id=&quot;mKey&quot;  name=&quot;value&quot; &gt;
${(SELECT==&apos;From_InCell_Network&apos;)?returnChannelOptions(IMAGE_SOURCE, &apos;xdce&apos;):&apos;&apos;&apos;&lt;option value=&quot;NA&quot;&gt;Select InCell_Network Image List Source&lt;/option&gt;&apos;&apos;&apos;}
&lt;/select&gt;-CHANNEL
&lt;input id=&quot;mValue&quot; type=&quot;text&quot; name=&quot;value&quot;&gt;-CONCEPT
&lt;p&gt;Navigate to an IMAGE_SOURCE folder with image acquisition metadata for assisted option
&lt;p&gt;

&quot;&quot;&quot;
 break
default:
html=&quot;&quot;&quot;
&lt;input type=&quot;text&quot; id=&quot;xtValue&quot; name=&quot;value&quot;&gt;(enter value)&lt;p&gt;Provide a value for the selected metadata key&quot;
&lt;p&gt;

&quot;&quot;&quot;
}


/* hidden_html is for carrying into HTML the value from Active Choice Parameters */

hidden_html=&quot;&lt;input id=\&quot;xmNode\&quot; value=\&quot;CHANNEL\&quot; type=\&quot;hidden\&quot;&gt; &lt;input id=\&quot;xmk\&quot; value=\&quot;$MAPPING\&quot; type=\&quot;hidden\&quot;&gt;&quot;
return html+hidden_html

/*helper methods */

/* method to find a file with particular extension */ 
def returnChannelOptions(path, xtnsion){
def channelOptions=[]
folder= new File(path)
folder.traverse(
        type:FileType.FILES,
        nameFilter:~/.*\.$xtnsion/,
        maxDepth:0
    ){f-&gt;
        channelOptions=getChannels(f)
        }
    return channelOptions.collect{&quot;&quot;&quot;&lt;option value=&quot;$it&quot;&gt;$it&lt;/option&gt;&quot;&quot;&quot;}.join(&apos;\n&apos;)

}

/*method to parse the ExcitationChannels of the InCell */
def getChannels(xdceFile){
def ImageStack = new XmlSlurper().parse(xdceFile)
    excitationFilters = []
        ImageStack.AutoLeadAcquisitionProtocol.Wavelengths.Wavelength.ExcitationFilter.each {
            excitationFilters.add(it.@name)
        }
        return excitationFilters
        }
</script>
            <fallbackScript>return[&apos;Error in CHANNEL_TO_CONCEPT&apos;]</fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>MAPPING,IMAGE_SOURCE,SELECT</referencedParameters>
          <choiceType>ET_FORMATTED_HTML</choiceType>
          <omitValueField>false</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.4">
          <name></name>
          <description>&lt;p&gt;Map channel recorded by Instrument to a Pipeline Object  
&lt;h1 style=&quot;color:blue&quot;&gt;Image List Annotation&lt;/h1&gt;</description>
          <randomName>choice-parameter-529391709937078</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>html=&apos;&apos;&apos;
&lt;p&gt; Click the &lt;b&gt;ADD&lt;/b&gt; button to add map entries. &lt;b&gt;Repeat as necessary&lt;/b&gt; to add more selection clauses
&lt;p&gt;To delete map entries check them and click DELETE. To clear all, click RESET
&lt;div id=&quot;jsPlan&quot;&gt;
&lt;input id=&quot;addJsEntry&quot; type=&quot;button&quot; value=&quot;ADD&quot; onclick=&quot;addPlannedAction(&apos;jsPlan&apos;)&quot;/&gt;
&lt;input id=&quot;delJsEntry&quot; name=&quot;subject&quot; type=&quot;button&quot; value=&quot;DELETE&quot; onclick=&quot;deletePlannedActionv(&apos;xtPlan&apos;,&apos;jsPlanAction&apos;)&quot;/&gt;
&lt;input id=&quot;resetAllEntries&quot; name=&quot;subject&quot; type=&quot;button&quot; value=&quot;RESET&quot;onclick=&quot;resetPlannedAction(&apos;xtPlan&apos;,&apos;jsPlanAction&apos;)&quot;/&gt;
&lt;p&gt;
&lt;/div&gt;&apos;&apos;&apos;
return html</script>
            <fallbackScript></fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters></referencedParameters>
          <choiceType>ET_FORMATTED_HTML</choiceType>
          <omitValueField>true</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.4">
          <name>WAVELENGTH_MAP</name>
          <description>(Hidden)  CHANNEL-OBJECT MAP entries</description>
          <randomName>choice-parameter-529391714156588</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>html=&apos;&apos;&apos;&lt;input id=&quot;xtPlan&quot; name=&quot;value&quot; class=&quot;setting-input&quot; type=&quot;text&quot; /&gt;&apos;&apos;&apos;

return html</script>
            <fallbackScript>return &quot;&lt;p&gt; Error in Script&quot;</fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters></referencedParameters>
          <choiceType>ET_FORMATTED_HIDDEN_HTML</choiceType>
          <omitValueField>true</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.4">
          <name>BUILD_LABEL</name>
          <description>&lt;h3 style=&quot;color:red&quot;&gt;[Required]&lt;/h3&gt;
&lt;p&gt;A label that can be used as an image list identifier.</description>
          <randomName>choice-parameter-529391718370709</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>def refParam=&apos;&apos;
if (IMAGE_SOURCE==&apos;&apos;){
refParam=&apos;CP_Uploaded_Image_List&apos;
}else{
pathParts=IMAGE_SOURCE.split(&apos;\\\\&apos;)
refParam=pathParts.last()
}

return &quot;&lt;input name=\&quot;value\&quot; value=\&quot;${refParam}\&quot; class=\&quot;setting-input\&quot; type=\&quot;text\&quot;&gt;&quot;
</script>
            <fallbackScript>return &apos;Error in Script&apos;</fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>IMAGE_SOURCE</referencedParameters>
          <choiceType>ET_FORMATTED_HTML</choiceType>
          <omitValueField>true</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
        <hudson.model.StringParameterDefinition>
          <name>IMAGELIST_DESCRIPTION</name>
          <description>&lt;p&gt;A short description of the image list.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>AUTHOR_COMMENTS</name>
          <description>&lt;p&gt;Provide any additional comments that may be helpful to others using this image list
</description>
          <defaultValue></defaultValue>
        </hudson.model.TextParameterDefinition>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@1.4">
          <name>helperJavaScript</name>
          <description>helperJavaScript</description>
          <randomName>choice-parameter-529391725542837</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <script>helperJavaScript=&quot;&quot;&quot;
&lt;script type=&quot;text/javascript&quot;&gt;
/* Function creates map when both key and value are provided from  CV selection */
function addPlannedAction() {
var planAction= &apos;map&apos;;
var mKeyPrefix= &apos;channel&apos;; //prefix of mKey 
var mKey= document.getElementById(&quot;mKey&quot;);
var dsOper= &apos;=&apos;
var mValue = document.getElementById(&quot;mValue&quot;).value;
var planVal=&apos;&apos;;
//planVal=planVal.concat(&quot;[&quot;,&quot;action:\\&quot;&quot;,planAction,&quot;\\&quot;,operator:\\&quot;&quot;,dsOper,&quot;\\&quot;,property:\\&quot;&quot;,mKey.value,&quot;\\&quot;,value:\\&quot;&quot;,mValue,&quot;\\&quot;&quot;,&quot;]&quot;);

planVal=planVal.concat(mKey.value,&quot;:&quot;,mValue,&quot;,&quot;);
document.getElementById(&quot;xtPlan&quot;).value = document.getElementById(&quot;xtPlan&quot;).value.concat(planVal);
/* add checkbox option */
addAnnotationCheckBox(&quot;jsPlan&quot;,mKeyPrefix,&quot;mKey&quot;, dsOper, mValue, planVal)
}

/* a generic function to add an annotation action checkbox ---------------------------------------*/

function addAnnotationCheckBox(plan,mKeyPrefix, mKey, mOper, mValue, planValue){
	var dNode=document.getElementById(plan);
	var x = document.createElement(&quot;INPUT&quot;);
	nameAction=plan.concat(&apos;Action&apos;);
	x.setAttribute(&quot;type&quot;, &quot;checkbox&quot;);
	x.setAttribute(&quot;name&quot;, nameAction);
        x.setAttribute(&quot;value&quot;, planValue);
	dNode.appendChild(x); 
	var y = document.createElement(&quot;label&quot;);
	y.setAttribute(&quot;class&quot;, &quot;attach-previous&quot;);
        var labelFor=mKeyPrefix +&apos;.&apos;+document.getElementById(mKey).value+&apos;.&apos;+mValue;
         x.title= labelFor;
        y.setAttribute(&quot;for&quot;, labelFor);
	y.innerHTML=mKeyPrefix+&apos;.&apos;+document.getElementById(mKey).value+mOper+mValue+&apos;&lt;br/&gt;&apos;;
	dNode.appendChild(y); 
}

/* the action is deleted from checklist as well as from hidden xtPlan text input */
function deletePlannedActionv(plan,nameAction){
  jQuery( document ).ready(function() {
                var selected= [];
            jQuery.each(jQuery(&quot;input[name=&quot;+nameAction+&quot;]:checked&quot;), function(){            
                selected.push(jQuery(this).val());
           delEntry=jQuery(this).val();
            console.log(&quot;Deleting:&quot;+ delEntry);
            document.getElementById(plan).value=document.getElementById(plan).value.replace(delEntry,&apos;&apos;);
           label2remove=jQuery(this).attr(&apos;title&apos;);
            console.log(&quot;Removing:&quot;+label2remove);
           jQuery(&apos;label[for=&quot;&apos;+label2remove+&apos;&quot;]&apos;).remove();           
           jQuery(this).remove();
            });
            //alert(&quot;Deleted: &quot; +selected.join(&quot;, &quot;));
});
}

function resetPlannedAction(plan,nameAction){
document.getElementById(plan).value=&apos;&apos;;
  jQuery( document ).ready(function() {
            jQuery.each(jQuery(&quot;input[name=&quot;+nameAction+&quot;]&quot;), function(){            
           label2remove=jQuery(this).attr(&apos;title&apos;);
          jQuery(&apos;label[for=&quot;&apos;+label2remove+&apos;&quot;]&apos;).remove();          
           jQuery(this).remove();
            });
            //alert(&quot;Deleted: &quot; +selected.join(&quot;, &quot;));
});
}


&lt;/script&gt;

&quot;&quot;&quot; //triple doubles

return helperJavaScript</script>
            <fallbackScript></fallbackScript>
          </script>
          <projectName>OS_CONTRIBUTE_IMAGELIST</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters></referencedParameters>
          <choiceType>ET_FORMATTED_HIDDEN_HTML</choiceType>
          <omitValueField>false</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.5">
      <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition" plugin="run-condition@1.0">
        <arg1>$SELECT</arg1>
        <arg2>From_InCell_Network</arg2>
        <ignoreCase>false</ignoreCase>
      </condition>
      <buildStep class="hudson.plugins.groovy.Groovy" plugin="groovy@1.29">
        <scriptSource class="hudson.plugins.groovy.FileScriptSource">
          <scriptFile>${JENKINS_HOME}/jobs/${JOB_NAME}/buildScripts/xdceSlurperMapRecurse.groovy</scriptFile>
        </scriptSource>
        <groovyName>Default</groovyName>
        <parameters></parameters>
        <scriptParameters>-i $IMAGE_SOURCE -d $WORKSPACE -m $WAVELENGTH_MAP</scriptParameters>
        <properties></properties>
        <javaOpts></javaOpts>
        <classPath></classPath>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.5">
      <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition" plugin="run-condition@1.0">
        <arg1>$SELECT</arg1>
        <arg2>From_Yokogawa_Network</arg2>
        <ignoreCase>false</ignoreCase>
      </condition>
      <buildStep class="hudson.plugins.groovy.Groovy" plugin="groovy@1.29">
        <scriptSource class="hudson.plugins.groovy.FileScriptSource">
          <scriptFile>${JENKINS_HOME}/jobs/${JOB_NAME}/buildScripts/yokoCpImageList_build.groovy</scriptFile>
        </scriptSource>
        <groovyName>Default</groovyName>
        <parameters>-cp ${JENKINS_HOME}/jobs/${JOB_NAME}/buildScripts</parameters>
        <scriptParameters>-i $IMAGE_SOURCE -o $WORKSPACE -m $WAVELENGTH_MAP</scriptParameters>
        <properties></properties>
        <javaOpts></javaOpts>
        <classPath></classPath>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Unstable" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.5">
      <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition" plugin="run-condition@1.0">
        <arg1>$SELECT</arg1>
        <arg2>Upload</arg2>
        <ignoreCase>false</ignoreCase>
      </condition>
      <buildStep class="hudson.plugins.groovy.Groovy" plugin="groovy@1.29">
        <scriptSource class="hudson.plugins.groovy.StringScriptSource">
          <command>/*rename the uploaded file to &apos;imagelist.csv&apos;
 allows unified processing by the adaptCPimageList groovy script
*/
env=System.getenv()
File file = new File(&quot;${env.WORKSPACE}/LIST_FROM&quot;)  
boolean fileRenamed = file.renameTo(new File(&apos;imageList.csv&apos;))


               </command>
        </scriptSource>
        <groovyName>Default</groovyName>
        <parameters></parameters>
        <scriptParameters></scriptParameters>
        <properties></properties>
        <javaOpts></javaOpts>
        <classPath></classPath>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.5">
      <condition class="org.jenkins_ci.plugins.run_condition.logic.Not" plugin="run-condition@1.0">
        <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition">
          <arg1>$PATH_MAP</arg1>
          <arg2></arg2>
          <ignoreCase>false</ignoreCase>
        </condition>
      </condition>
      <buildStep class="hudson.plugins.groovy.Groovy" plugin="groovy@1.29">
        <scriptSource class="hudson.plugins.groovy.FileScriptSource">
          <scriptFile>${JENKINS_HOME}/jobs/${JOB_NAME}/buildScripts/adaptImageList.groovy</scriptFile>
        </scriptSource>
        <groovyName>Default</groovyName>
        <parameters></parameters>
        <scriptParameters>-i$WORKSPACE/imageList.csv</scriptParameters>
        <properties></properties>
        <javaOpts></javaOpts>
        <classPath></classPath>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.scriptler.builder.ScriptlerBuilder plugin="scriptler@2.9">
      <builderId>1471025477409_3</builderId>
      <scriptId>trackListMetadata.groovy</scriptId>
      <propagateParams>false</propagateParams>
      <parameters>
        <org.jenkinsci.plugins.scriptler.config.Parameter>
          <name>vPathToImageList</name>
          <value>$WORKSPACE/imageList.csv</value>
        </org.jenkinsci.plugins.scriptler.config.Parameter>
        <org.jenkinsci.plugins.scriptler.config.Parameter>
          <name>vOrigin</name>
          <value>$SELECT</value>
        </org.jenkinsci.plugins.scriptler.config.Parameter>
      </parameters>
    </org.jenkinsci.plugins.scriptler.builder.ScriptlerBuilder>
    <hudson.plugins.groovy.Groovy plugin="groovy@1.29">
      <scriptSource class="hudson.plugins.groovy.FileScriptSource">
        <scriptFile>$JENKINS_HOME/userContent/scripts2/writeXMLProperties_cli.groovy</scriptFile>
      </scriptSource>
      <groovyName>Default</groovyName>
      <parameters></parameters>
      <scriptParameters>-w $WORKSPACE -c ${JENKINS_HOME}/jobs/${JOB_NAME}/buildProps/report.properties</scriptParameters>
      <properties></properties>
      <javaOpts></javaOpts>
      <classPath></classPath>
    </hudson.plugins.groovy.Groovy>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>true</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.summary__report.ACIPluginPublisher plugin="summary_report@1.15">
      <name>*.xml</name>
      <shownOnProjectPage>false</shownOnProjectPage>
    </hudson.plugins.summary__report.ACIPluginPublisher>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.30">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>true</cleanWhenFailure>
      <cleanWhenNotBuilt>false</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.5">
      <template>${ENV,var=&quot;BUILD_LABEL&quot;}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>